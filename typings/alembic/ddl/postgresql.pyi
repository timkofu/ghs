"""
This type stub file was generated by pyright.
"""

from .base import AlterColumn, ColumnComment, IdentityColumnDefault, RenameTable, compiles
from .impl import DefaultImpl
from ..operations import ops
from ..operations.base import BatchOperations, Operations

log = ...
class PostgresqlImpl(DefaultImpl):
    __dialect__ = ...
    transactional_ddl = ...
    type_synonyms = ...
    identity_attrs_ignore = ...
    def prep_table_for_batch(self, batch_impl, table): # -> None:
        ...
    
    def compare_server_default(self, inspector_column, metadata_column, rendered_metadata_default, rendered_inspector_default): # -> bool:
        ...
    
    def alter_column(self, table_name, column_name, nullable=..., server_default=..., name=..., type_=..., schema=..., autoincrement=..., existing_type=..., existing_server_default=..., existing_nullable=..., existing_autoincrement=..., **kw): # -> None:
        ...
    
    def autogen_column_reflect(self, inspector, table, column_info): # -> None:
        ...
    
    def correct_for_autogen_constraints(self, conn_unique_constraints, conn_indexes, metadata_unique_constraints, metadata_indexes): # -> None:
        ...
    
    def render_type(self, type_, autogen_context): # -> Any | Literal[False]:
        ...
    


class PostgresqlColumnType(AlterColumn):
    def __init__(self, name, column_name, type_, **kw) -> None:
        ...
    


@compiles(RenameTable, "postgresql")
def visit_rename_table(element, compiler, **kw): # -> str:
    ...

@compiles(PostgresqlColumnType, "postgresql")
def visit_column_type(element, compiler, **kw): # -> str:
    ...

@compiles(ColumnComment, "postgresql")
def visit_column_comment(element, compiler, **kw): # -> str:
    ...

@compiles(IdentityColumnDefault, "postgresql")
def visit_identity_column(element, compiler, **kw): # -> str:
    ...

@Operations.register_operation("create_exclude_constraint")
@BatchOperations.register_operation("create_exclude_constraint", "batch_create_exclude_constraint")
@ops.AddConstraintOp.register_add_constraint("exclude_constraint")
class CreateExcludeConstraintOp(ops.AddConstraintOp):
    """Represent a create exclude constraint operation."""
    constraint_type = ...
    def __init__(self, constraint_name, table_name, elements, where=..., schema=..., _orig_constraint=..., **kw) -> None:
        ...
    
    @classmethod
    def from_constraint(cls, constraint): # -> CreateExcludeConstraintOp:
        ...
    
    def to_constraint(self, migration_context=...): # -> ExcludeConstraint:
        ...
    
    @classmethod
    def create_exclude_constraint(cls, operations, constraint_name, table_name, *elements, **kw):
        """Issue an alter to create an EXCLUDE constraint using the
        current migration context.

        .. note::  This method is Postgresql specific, and additionally
           requires at least SQLAlchemy 1.0.

        e.g.::

            from alembic import op

            op.create_exclude_constraint(
                "user_excl",
                "user",

                ("period", '&&'),
                ("group", '='),
                where=("group != 'some group'")

            )

        Note that the expressions work the same way as that of
        the ``ExcludeConstraint`` object itself; if plain strings are
        passed, quoting rules must be applied manually.

        :param name: Name of the constraint.
        :param table_name: String name of the source table.
        :param elements: exclude conditions.
        :param where: SQL expression or SQL string with optional WHERE
         clause.
        :param deferrable: optional bool. If set, emit DEFERRABLE or
         NOT DEFERRABLE when issuing DDL for this constraint.
        :param initially: optional string. If set, emit INITIALLY <value>
         when issuing DDL for this constraint.
        :param schema: Optional schema name to operate within.

        """
        ...
    
    @classmethod
    def batch_create_exclude_constraint(cls, operations, constraint_name, *elements, **kw):
        """Issue a "create exclude constraint" instruction using the
        current batch migration context.

        .. note::  This method is Postgresql specific, and additionally
           requires at least SQLAlchemy 1.0.

        .. seealso::

            :meth:`.Operations.create_exclude_constraint`

        """
        ...
    


