"""
This type stub file was generated by pyright.
"""

from sqlalchemy.ext.compiler import compiles
from sqlalchemy.schema import DDLElement

class AlterTable(DDLElement):
    """Represent an ALTER TABLE statement.

    Only the string name and optional schema name of the table
    is required, not a full Table object.

    """
    def __init__(self, table_name, schema=...) -> None:
        ...
    


class RenameTable(AlterTable):
    def __init__(self, old_table_name, new_table_name, schema=...) -> None:
        ...
    


class AlterColumn(AlterTable):
    def __init__(self, name, column_name, schema=..., existing_type=..., existing_nullable=..., existing_server_default=..., existing_comment=...) -> None:
        ...
    


class ColumnNullable(AlterColumn):
    def __init__(self, name, column_name, nullable, **kw) -> None:
        ...
    


class ColumnType(AlterColumn):
    def __init__(self, name, column_name, type_, **kw) -> None:
        ...
    


class ColumnName(AlterColumn):
    def __init__(self, name, column_name, newname, **kw) -> None:
        ...
    


class ColumnDefault(AlterColumn):
    def __init__(self, name, column_name, default, **kw) -> None:
        ...
    


class ComputedColumnDefault(AlterColumn):
    def __init__(self, name, column_name, default, **kw) -> None:
        ...
    


class IdentityColumnDefault(AlterColumn):
    def __init__(self, name, column_name, default, impl, **kw) -> None:
        ...
    


class AddColumn(AlterTable):
    def __init__(self, name, column, schema=...) -> None:
        ...
    


class DropColumn(AlterTable):
    def __init__(self, name, column, schema=...) -> None:
        ...
    


class ColumnComment(AlterColumn):
    def __init__(self, name, column_name, comment, **kw) -> None:
        ...
    


@compiles(RenameTable)
def visit_rename_table(element, compiler, **kw): # -> str:
    ...

@compiles(AddColumn)
def visit_add_column(element, compiler, **kw): # -> str:
    ...

@compiles(DropColumn)
def visit_drop_column(element, compiler, **kw): # -> str:
    ...

@compiles(ColumnNullable)
def visit_column_nullable(element, compiler, **kw): # -> str:
    ...

@compiles(ColumnType)
def visit_column_type(element, compiler, **kw): # -> str:
    ...

@compiles(ColumnName)
def visit_column_name(element, compiler, **kw): # -> str:
    ...

@compiles(ColumnDefault)
def visit_column_default(element, compiler, **kw): # -> str:
    ...

@compiles(ComputedColumnDefault)
def visit_computed_column(element, compiler, **kw): # -> NoReturn:
    ...

@compiles(IdentityColumnDefault)
def visit_identity_column(element, compiler, **kw): # -> NoReturn:
    ...

def quote_dotted(name, quote): # -> str:
    """quote the elements of a dotted name"""
    ...

def format_table_name(compiler, name, schema):
    ...

def format_column_name(compiler, name):
    ...

def format_server_default(compiler, default):
    ...

def format_type(compiler, type_):
    ...

def alter_table(compiler, name, schema):
    ...

def drop_column(compiler, name):
    ...

def alter_column(compiler, name):
    ...

def add_column(compiler, column, **kw):
    ...

