"""
This type stub file was generated by pyright.
"""

def assert_raises(except_cls, callable_, *args, **kw): # -> None:
    ...

def assert_raises_context_ok(except_cls, callable_, *args, **kw): # -> None:
    ...

def assert_raises_message(except_cls, msg, callable_, *args, **kwargs): # -> None:
    ...

def assert_raises_message_context_ok(except_cls, msg, callable_, *args, **kwargs): # -> None:
    ...

class _ErrorContainer:
    error = ...


def expect_raises(except_cls, check_context=...): # -> _GeneratorContextManager[_ErrorContainer]:
    ...

def expect_raises_message(except_cls, msg, check_context=...): # -> _GeneratorContextManager[_ErrorContainer]:
    ...

def eq_ignore_whitespace(a, b, msg=...): # -> None:
    ...

_dialect_mods = ...
def expect_warnings(*messages, **kw):
    """Context manager which expects one or more warnings.

    With no arguments, squelches all SAWarnings emitted via
    sqlalchemy.util.warn and sqlalchemy.util.warn_limited.   Otherwise
    pass string expressions that will match selected warnings via regex;
    all non-matching warnings are sent through.

    The expect version **asserts** that the warnings were in fact seen.

    Note that the test suite sets SAWarning warnings to raise exceptions.

    """
    ...

def emits_python_deprecation_warning(*messages): # -> (fn: Unknown, *args: Unknown, **kw: Unknown) -> Unknown:
    """Decorator form of expect_warnings().

    Note that emits_warning does **not** assert that the warnings
    were in fact seen.

    """
    ...

def expect_sqlalchemy_deprecated(*messages, **kw):
    ...

def expect_sqlalchemy_deprecated_20(*messages, **kw):
    ...

