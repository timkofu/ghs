"""
This type stub file was generated by pyright.
"""

import os

"""Helpers related to deprecation of functions, methods, classes, other
functionality."""
SQLALCHEMY_WARN_20 = ...
if os.getenv("SQLALCHEMY_WARN_20", "false").lower() in ("true", "yes", "1"):
    SQLALCHEMY_WARN_20 = ...
def warn_deprecated(msg, version, stacklevel=..., code=...): # -> None:
    ...

def warn_deprecated_limited(msg, args, version, stacklevel=..., code=...): # -> None:
    """Issue a deprecation warning with a parameterized string,
    limiting the number of registrations.

    """
    ...

def warn_deprecated_20(msg, stacklevel=..., code=...): # -> None:
    ...

def deprecated_cls(version, message, constructor=...): # -> (cls: Unknown) -> (Any | Unknown):
    ...

def deprecated_20_cls(clsname, alternative=..., constructor=..., becomes_legacy=...): # -> (cls: Unknown) -> (Any | Unknown):
    ...

def deprecated(version, message=..., add_deprecation_to_docstring=..., warning=..., enable_warnings=...): # -> (fn: Unknown) -> Unknown:
    """Decorates a function and issues a deprecation warning on use.

    :param version:
      Issue version in the warning.

    :param message:
      If provided, issue message in the warning.  A sensible default
      is used if not provided.

    :param add_deprecation_to_docstring:
      Default True.  If False, the wrapped function's __doc__ is left
      as-is.  If True, the 'message' is prepended to the docs if
      provided, or sensible default if message is omitted.

    """
    ...

def moved_20(message, **kw): # -> (fn: Unknown) -> Unknown:
    ...

def deprecated_20(api_name, alternative=..., becomes_legacy=..., **kw): # -> (fn: Unknown) -> Unknown:
    ...

def deprecated_params(**specs): # -> (fn: Unknown) -> Unknown:
    """Decorates a function to warn on use of certain parameters.

    e.g. ::

        @deprecated_params(
            weak_identity_map=(
                "0.7",
                "the :paramref:`.Session.weak_identity_map parameter "
                "is deprecated."
            )

        )

    """
    ...

