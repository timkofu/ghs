"""
This type stub file was generated by pyright.
"""

import greenlet
from typing import Any, Callable, Coroutine
from . import compat
from .langhelpers import memoized_property

if compat.py37:
    ...
else:
    _copy_context = ...
def is_exit_exception(e): # -> bool:
    ...

class _AsyncIoGreenlet(greenlet.greenlet):
    def __init__(self, fn, driver) -> None:
        ...
    


def await_only(awaitable: Coroutine) -> Any:
    """Awaits an async function in a sync method.

    The sync method must be inside a :func:`greenlet_spawn` context.
    :func:`await_` calls cannot be nested.

    :param awaitable: The coroutine to call.

    """
    ...

def await_fallback(awaitable: Coroutine) -> Any:
    """Awaits an async function in a sync method.

    The sync method must be inside a :func:`greenlet_spawn` context.
    :func:`await_` calls cannot be nested.

    :param awaitable: The coroutine to call.

    """
    ...

async def greenlet_spawn(fn: Callable, *args, _require_await=..., **kwargs) -> Any:
    """Runs a sync function ``fn`` in a new greenlet.

    The sync function can then use :func:`await_` to wait for async
    functions.

    :param fn: The sync callable to call.
    :param \\*args: Positional arguments to pass to the ``fn`` callable.
    :param \\*\\*kwargs: Keyword arguments to pass to the ``fn`` callable.
    """
    ...

class AsyncAdaptedLock:
    @memoized_property
    def mutex(self): # -> Lock:
        ...
    
    def __enter__(self): # -> AsyncAdaptedLock:
        ...
    
    def __exit__(self, *arg, **kw): # -> None:
        ...
    


def get_event_loop(): # -> AbstractEventLoop:
    """vendor asyncio.get_event_loop() for python 3.7 and above.

    Python 3.10 deprecates get_event_loop() as a standalone.

    """
    ...

