"""
This type stub file was generated by pyright.
"""

from .. import util

"""Constants and rudimental functions used throughout the ORM.

"""
PASSIVE_NO_RESULT = ...
PASSIVE_CLASS_MISMATCH = ...
ATTR_WAS_SET = ...
ATTR_EMPTY = ...
NO_VALUE = ...
NEVER_SET = ...
NO_CHANGE = ...
CALLABLES_OK = ...
SQL_OK = ...
RELATED_OBJECT_OK = ...
INIT_OK = ...
NON_PERSISTENT_OK = ...
LOAD_AGAINST_COMMITTED = ...
NO_AUTOFLUSH = ...
NO_RAISE = ...
PASSIVE_OFF = ...
PASSIVE_RETURN_NO_VALUE = ...
PASSIVE_NO_INITIALIZE = ...
PASSIVE_NO_FETCH = ...
PASSIVE_NO_FETCH_RELATED = ...
PASSIVE_ONLY_PERSISTENT = ...
DEFAULT_MANAGER_ATTR = ...
DEFAULT_STATE_ATTR = ...
EXT_CONTINUE = ...
EXT_STOP = ...
EXT_SKIP = ...
ONETOMANY = ...
MANYTOONE = ...
MANYTOMANY = ...
NOT_EXTENSION = ...
_never_set = ...
_none_set = ...
_SET_DEFERRED_EXPIRED = ...
_DEFER_FOR_STATE = ...
_RAISE_FOR_STATE = ...
def manager_of_class(cls):
    ...

instance_state = ...
instance_dict = ...
def instance_str(instance): # -> str:
    """Return a string describing an instance."""
    ...

def state_str(state): # -> str:
    """Return a string describing an instance via its InstanceState."""
    ...

def state_class_str(state): # -> str:
    """Return a string describing an instance's class via its
    InstanceState.
    """
    ...

def attribute_str(instance, attribute):
    ...

def state_attribute_str(state, attribute):
    ...

def object_mapper(instance): # -> Any:
    """Given an object, return the primary Mapper associated with the object
    instance.

    Raises :class:`sqlalchemy.orm.exc.UnmappedInstanceError`
    if no mapping is configured.

    This function is available via the inspection system as::

        inspect(instance).mapper

    Using the inspection system will raise
    :class:`sqlalchemy.exc.NoInspectionAvailable` if the instance is
    not part of a mapping.

    """
    ...

def object_state(instance): # -> Any:
    """Given an object, return the :class:`.InstanceState`
    associated with the object.

    Raises :class:`sqlalchemy.orm.exc.UnmappedInstanceError`
    if no mapping is configured.

    Equivalent functionality is available via the :func:`_sa.inspect`
    function as::

        inspect(instance)

    Using the inspection system will raise
    :class:`sqlalchemy.exc.NoInspectionAvailable` if the instance is
    not part of a mapping.

    """
    ...

_state_mapper = ...
def class_mapper(class_, configure=...):
    """Given a class, return the primary :class:`_orm.Mapper` associated
    with the key.

    Raises :exc:`.UnmappedClassError` if no mapping is configured
    on the given class, or :exc:`.ArgumentError` if a non-class
    object is passed.

    Equivalent functionality is available via the :func:`_sa.inspect`
    function as::

        inspect(some_mapped_class)

    Using the inspection system will raise
    :class:`sqlalchemy.exc.NoInspectionAvailable` if the class is not mapped.

    """
    ...

class InspectionAttr:
    """A base class applied to all ORM objects that can be returned
    by the :func:`_sa.inspect` function.

    The attributes defined here allow the usage of simple boolean
    checks to test basic facts about the object returned.

    While the boolean checks here are basically the same as using
    the Python isinstance() function, the flags here can be used without
    the need to import all of these classes, and also such that
    the SQLAlchemy class system can change while leaving the flags
    here intact for forwards-compatibility.

    """
    __slots__ = ...
    is_selectable = ...
    is_aliased_class = ...
    is_instance = ...
    is_mapper = ...
    is_bundle = ...
    is_property = ...
    is_attribute = ...
    _is_internal_proxy = ...
    is_clause_element = ...
    extension_type = ...


class InspectionAttrInfo(InspectionAttr):
    """Adds the ``.info`` attribute to :class:`.InspectionAttr`.

    The rationale for :class:`.InspectionAttr` vs. :class:`.InspectionAttrInfo`
    is that the former is compatible as a mixin for classes that specify
    ``__slots__``; this is essentially an implementation artifact.

    """
    @util.memoized_property
    def info(self): # -> dict[Unknown, Unknown]:
        """Info dictionary associated with the object, allowing user-defined
        data to be associated with this :class:`.InspectionAttr`.

        The dictionary is generated when first accessed.  Alternatively,
        it can be specified as a constructor argument to the
        :func:`.column_property`, :func:`_orm.relationship`, or
        :func:`.composite`
        functions.

        .. versionchanged:: 1.0.0 :attr:`.MapperProperty.info` is also
           available on extension types via the
           :attr:`.InspectionAttrInfo.info` attribute, so that it can apply
           to a wider variety of ORM and extension constructs.

        .. seealso::

            :attr:`.QueryableAttribute.info`

            :attr:`.SchemaItem.info`

        """
        ...
    


class _MappedAttribute:
    """Mixin for attributes which should be replaced by mapper-assigned
    attributes.

    """
    __slots__ = ...


