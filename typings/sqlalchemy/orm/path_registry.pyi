"""
This type stub file was generated by pyright.
"""

from .. import util
from ..sql.traversals import HasCacheKey

"""Path tracking utilities, representing mapper graph traversals.

"""
log = ...
_WILDCARD_TOKEN = ...
_DEFAULT_TOKEN = ...
class PathRegistry(HasCacheKey):
    """Represent query load paths and registry functions.

    Basically represents structures like:

    (<User mapper>, "orders", <Order mapper>, "items", <Item mapper>)

    These structures are generated by things like
    query options (joinedload(), subqueryload(), etc.) and are
    used to compose keys stored in the query._attributes dictionary
    for various options.

    They are then re-composed at query compile/result row time as
    the query is formed and as rows are fetched, where they again
    serve to compose keys to look up options in the context.attributes
    dictionary, which is copied from query._attributes.

    The path structure has a limited amount of caching, where each
    "root" ultimately pulls from a fixed registry associated with
    the first mapper, that also contains elements for each of its
    property keys.  However paths longer than two elements, which
    are the exception rather than the rule, are generated on an
    as-needed basis.

    """
    __slots__ = ...
    is_token = ...
    is_root = ...
    _cache_key_traversal = ...
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def set(self, attributes, key, value): # -> None:
        ...
    
    def setdefault(self, attributes, key, value): # -> None:
        ...
    
    def get(self, attributes, key, value=...):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __hash__(self) -> int:
        ...
    
    @property
    def length(self): # -> int:
        ...
    
    def pairs(self): # -> Generator[tuple[Unknown, Unknown], None, None]:
        ...
    
    def contains_mapper(self, mapper): # -> bool:
        ...
    
    def contains(self, attributes, key): # -> bool:
        ...
    
    def __reduce__(self): # -> tuple[(path: Unknown) -> Unknown | None, tuple[list[Tuple[Unknown, Unknown]]]]:
        ...
    
    @classmethod
    def serialize_context_dict(cls, dict_, tokens): # -> list[tuple[tuple[Unknown, list[Tuple[Unknown, Unknown]]], Unknown]]:
        ...
    
    @classmethod
    def deserialize_context_dict(cls, serialized): # -> OrderedDict:
        ...
    
    def serialize(self): # -> list[Tuple[Unknown, Unknown]]:
        ...
    
    @classmethod
    def deserialize(cls, path): # -> None:
        ...
    
    @classmethod
    def per_mapper(cls, mapper): # -> CachingEntityRegistry | SlotsEntityRegistry:
        ...
    
    @classmethod
    def coerce(cls, raw):
        ...
    
    def token(self, token): # -> TokenRegistry:
        ...
    
    def __add__(self, other):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class RootRegistry(PathRegistry):
    """Root registry, defers to mappers so that
    paths are maintained per-root-mapper.

    """
    inherit_cache = ...
    path = ...
    has_entity = ...
    is_aliased_class = ...
    is_root = ...
    def __getitem__(self, entity):
        ...
    


class PathToken(HasCacheKey, str):
    """cacheable string token"""
    _intern = ...
    @classmethod
    def intern(cls, strvalue): # -> PathToken:
        ...
    


class TokenRegistry(PathRegistry):
    __slots__ = ...
    inherit_cache = ...
    def __init__(self, parent, token) -> None:
        ...
    
    has_entity = ...
    is_token = ...
    def generate_for_superclasses(self): # -> Generator[TokenRegistry, None, None]:
        ...
    
    def __getitem__(self, entity):
        ...
    


class PropRegistry(PathRegistry):
    is_unnatural = ...
    inherit_cache = ...
    def __init__(self, parent, prop) -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    @util.memoized_property
    def has_entity(self): # -> bool:
        ...
    
    @util.memoized_property
    def entity(self):
        ...
    
    @property
    def mapper(self): # -> memoized_property:
        ...
    
    @property
    def entity_path(self): # -> SlotsEntityRegistry:
        ...
    
    def __getitem__(self, entity): # -> SlotsEntityRegistry:
        ...
    


class AbstractEntityRegistry(PathRegistry):
    __slots__ = ...
    has_entity = ...
    def __init__(self, parent, entity) -> None:
        ...
    
    @property
    def entity_path(self): # -> AbstractEntityRegistry:
        ...
    
    @property
    def mapper(self):
        ...
    
    def __bool__(self): # -> Literal[True]:
        ...
    
    __nonzero__ = ...
    def __getitem__(self, entity): # -> PropRegistry:
        ...
    


class SlotsEntityRegistry(AbstractEntityRegistry):
    inherit_cache = ...
    __slots__ = ...


class CachingEntityRegistry(AbstractEntityRegistry, dict):
    inherit_cache = ...
    def __getitem__(self, entity):
        ...
    
    def __missing__(self, key): # -> PropRegistry:
        ...
    


