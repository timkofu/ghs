"""
This type stub file was generated by pyright.
"""

from . import attributes, relationships, strategies
from .query import Query
from .. import log

"""Dynamic collection API.

Dynamic collections act like Query() objects for read operations and support
basic add/delete mutation.

"""
@log.class_logger
@relationships.RelationshipProperty.strategy_for(lazy="dynamic")
class DynaLoader(strategies.AbstractRelationshipLoader):
    def init_class_attribute(self, mapper): # -> None:
        ...
    


class DynamicAttributeImpl(attributes.AttributeImpl):
    uses_objects = ...
    default_accepts_scalar_loader = ...
    supports_population = ...
    collection = ...
    dynamic = ...
    order_by = ...
    def __init__(self, class_, key, typecallable, dispatch, target_mapper, order_by, query_class=..., **kw) -> None:
        ...
    
    def get(self, state, dict_, passive=...): # -> OrderedIdentitySet | AppenderQuery | Any:
        ...
    
    def get_collection(self, state, dict_, user_data=..., passive=...): # -> DynamicCollectionAdapter:
        ...
    
    def fire_append_event(self, state, dict_, value, initiator, collection_history=...): # -> None:
        ...
    
    def fire_remove_event(self, state, dict_, value, initiator, collection_history=...): # -> None:
        ...
    
    def set(self, state, dict_, value, initiator=..., passive=..., check_old=..., pop=..., _adapt=...): # -> None:
        ...
    
    def delete(self, *args, **kwargs):
        ...
    
    def set_committed_value(self, state, dict_, value):
        ...
    
    def get_history(self, state, dict_, passive=...): # -> History:
        ...
    
    def get_all_pending(self, state, dict_, passive=...): # -> list[tuple[Any, Unknown]]:
        ...
    
    def append(self, state, dict_, value, initiator, passive=...): # -> None:
        ...
    
    def remove(self, state, dict_, value, initiator, passive=...): # -> None:
        ...
    
    def pop(self, state, dict_, value, initiator, passive=...): # -> None:
        ...
    


class DynamicCollectionAdapter:
    """simplified CollectionAdapter for internal API consistency"""
    def __init__(self, data) -> None:
        ...
    
    def __iter__(self): # -> Iterator[_T@iter]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __bool__(self): # -> Literal[True]:
        ...
    
    __nonzero__ = ...


class AppenderMixin:
    query_class = ...
    def __init__(self, attr, state) -> None:
        ...
    
    def session(self): # -> Any | None:
        ...
    
    session = ...
    def __getitem__(self, index): # -> Any:
        ...
    
    def count(self): # -> int | Any:
        ...
    
    def extend(self, iterator): # -> None:
        ...
    
    def append(self, item): # -> None:
        ...
    
    def remove(self, item): # -> None:
        ...
    


class AppenderQuery(AppenderMixin, Query):
    """A dynamic query that supports basic collection storage operations."""
    ...


def mixin_user_query(cls): # -> Any:
    """Return a new class with AppenderQuery functionality layered over."""
    ...

class CollectionHistory:
    """Overrides AttributeHistory to receive append/remove events directly."""
    def __init__(self, attr, state, apply_to=...) -> None:
        ...
    
    @property
    def added_plus_unchanged(self): # -> list[Unknown]:
        ...
    
    @property
    def all_items(self): # -> list[Unknown]:
        ...
    
    def as_history(self): # -> History:
        ...
    
    def indexed(self, index):
        ...
    
    def add_added(self, value): # -> None:
        ...
    
    def add_removed(self, value): # -> None:
        ...
    


