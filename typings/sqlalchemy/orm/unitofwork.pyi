"""
This type stub file was generated by pyright.
"""

from .. import util

"""The internals for the unit of work system.

The session's flush() process passes objects to a contextual object
here, which assembles flush tasks based on mappers and their properties,
organizes them in order of dependency, and executes.

"""
def track_cascade_events(descriptor, prop): # -> None:
    """Establish event listeners on object attributes which handle
    cascade-on-set/append.

    """
    ...

class UOWTransaction:
    def __init__(self, session) -> None:
        ...
    
    @property
    def has_work(self): # -> bool:
        ...
    
    def was_already_deleted(self, state): # -> bool:
        """Return ``True`` if the given state is expired and was deleted
        previously.
        """
        ...
    
    def is_deleted(self, state): # -> Literal[False]:
        """Return ``True`` if the given state is marked as deleted
        within this uowtransaction."""
        ...
    
    def memo(self, key, callable_):
        ...
    
    def remove_state_actions(self, state): # -> None:
        """Remove pending actions for a state from the uowtransaction."""
        ...
    
    def get_attribute_history(self, state, key, passive=...):
        """Facade to attributes.get_state_history(), including
        caching of results."""
        ...
    
    def has_dep(self, processor): # -> bool:
        ...
    
    def register_preprocessor(self, processor, fromparent): # -> None:
        ...
    
    def register_object(self, state, isdelete=..., listonly=..., cancel_delete=..., operation=..., prop=...): # -> bool:
        ...
    
    def register_post_update(self, state, post_update_cols): # -> None:
        ...
    
    def filter_states_for_dep(self, dep, states): # -> list[Unknown]:
        """Filter the given list of InstanceStates to those relevant to the
        given DependencyProcessor.

        """
        ...
    
    def states_for_mapper_hierarchy(self, mapper, isdelete, listonly): # -> Generator[Unknown, None, None]:
        ...
    
    def execute(self): # -> None:
        ...
    
    def finalize_flush_changes(self): # -> None:
        """Mark processed objects as clean / deleted after a successful
        flush().

        This method is called within the flush() method after the
        execute() method has succeeded and the transaction has been committed.

        """
        ...
    


class IterateMappersMixin:
    ...


class Preprocess(IterateMappersMixin):
    __slots__ = ...
    def __init__(self, dependency_processor, fromparent) -> None:
        ...
    
    def execute(self, uow): # -> bool:
        ...
    


class PostSortRec:
    __slots__ = ...
    def __new__(cls, uow, *args): # -> Any:
        ...
    
    def execute_aggregate(self, uow, recs): # -> None:
        ...
    


class ProcessAll(IterateMappersMixin, PostSortRec):
    __slots__ = ...
    def __init__(self, uow, dependency_processor, isdelete, fromparent) -> None:
        ...
    
    def execute(self, uow): # -> None:
        ...
    
    def per_state_flush_actions(self, uow): # -> Iterator[Any]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class PostUpdateAll(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, mapper, isdelete) -> None:
        ...
    
    @util.preload_module("sqlalchemy.orm.persistence")
    def execute(self, uow): # -> None:
        ...
    


class SaveUpdateAll(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, mapper) -> None:
        ...
    
    @util.preload_module("sqlalchemy.orm.persistence")
    def execute(self, uow): # -> None:
        ...
    
    def per_state_flush_actions(self, uow): # -> Generator[SaveUpdateState, None, None]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DeleteAll(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, mapper) -> None:
        ...
    
    @util.preload_module("sqlalchemy.orm.persistence")
    def execute(self, uow): # -> None:
        ...
    
    def per_state_flush_actions(self, uow): # -> Generator[DeleteState, None, None]:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class ProcessState(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, dependency_processor, isdelete, state) -> None:
        ...
    
    def execute_aggregate(self, uow, recs): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class SaveUpdateState(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, state) -> None:
        ...
    
    @util.preload_module("sqlalchemy.orm.persistence")
    def execute_aggregate(self, uow, recs): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class DeleteState(PostSortRec):
    __slots__ = ...
    def __init__(self, uow, state) -> None:
        ...
    
    @util.preload_module("sqlalchemy.orm.persistence")
    def execute_aggregate(self, uow, recs): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


