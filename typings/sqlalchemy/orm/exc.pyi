"""
This type stub file was generated by pyright.
"""

from .. import exc as sa_exc, util

"""SQLAlchemy ORM exceptions."""
NO_STATE = ...
class StaleDataError(sa_exc.SQLAlchemyError):
    """An operation encountered database state that is unaccounted for.

    Conditions which cause this to happen include:

    * A flush may have attempted to update or delete rows
      and an unexpected number of rows were matched during
      the UPDATE or DELETE statement.   Note that when
      version_id_col is used, rows in UPDATE or DELETE statements
      are also matched against the current known version
      identifier.

    * A mapped object with version_id_col was refreshed,
      and the version number coming back from the database does
      not match that of the object itself.

    * A object is detached from its parent object, however
      the object was previously attached to a different parent
      identity which was garbage collected, and a decision
      cannot be made if the new parent was really the most
      recent "parent".

    """
    ...


ConcurrentModificationError = StaleDataError
class FlushError(sa_exc.SQLAlchemyError):
    """A invalid condition was detected during flush()."""
    ...


class UnmappedError(sa_exc.InvalidRequestError):
    """Base for exceptions that involve expected mappings not present."""
    ...


class ObjectDereferencedError(sa_exc.SQLAlchemyError):
    """An operation cannot complete due to an object being garbage
    collected.

    """
    ...


class DetachedInstanceError(sa_exc.SQLAlchemyError):
    """An attempt to access unloaded attributes on a
    mapped instance that is detached."""
    code = ...


class UnmappedInstanceError(UnmappedError):
    """An mapping operation was requested for an unknown instance."""
    @util.preload_module("sqlalchemy.orm.base")
    def __init__(self, obj, msg=...) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Type[UnmappedInstanceError], tuple[None, Any]]:
        ...
    


class UnmappedClassError(UnmappedError):
    """An mapping operation was requested for an unknown class."""
    def __init__(self, cls, msg=...) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Type[UnmappedClassError], tuple[None, Any]]:
        ...
    


class ObjectDeletedError(sa_exc.InvalidRequestError):
    """A refresh operation failed to retrieve the database
    row corresponding to an object's known primary key identity.

    A refresh operation proceeds when an expired attribute is
    accessed on an object, or when :meth:`_query.Query.get` is
    used to retrieve an object which is, upon retrieval, detected
    as expired.   A SELECT is emitted for the target row
    based on primary key; if no row is returned, this
    exception is raised.

    The true meaning of this exception is simply that
    no row exists for the primary key identifier associated
    with a persistent object.   The row may have been
    deleted, or in some cases the primary key updated
    to a new value, outside of the ORM's management of the target
    object.

    """
    @util.preload_module("sqlalchemy.orm.base")
    def __init__(self, state, msg=...) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Type[ObjectDeletedError], tuple[None, Any]]:
        ...
    


class UnmappedColumnError(sa_exc.InvalidRequestError):
    """Mapping operation was requested on an unknown column."""
    ...


class LoaderStrategyException(sa_exc.InvalidRequestError):
    """A loader strategy for an attribute does not exist."""
    def __init__(self, applied_to_property_type, requesting_property, applies_to, actual_strategy_type, strategy_key) -> None:
        ...
    


