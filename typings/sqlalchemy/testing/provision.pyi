"""
This type stub file was generated by pyright.
"""

log = ...
FOLLOWER_IDENT = ...
class register:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def init(cls, fn): # -> register:
        ...
    
    def for_db(self, *dbnames): # -> (fn: Unknown) -> register:
        ...
    
    def __call__(self, cfg, *arg):
        ...
    


def create_follower_db(follower_ident): # -> None:
    ...

def setup_config(db_url, options, file_config, follower_ident): # -> Config:
    ...

def drop_follower_db(follower_ident): # -> None:
    ...

def generate_db_urls(db_urls, extra_drivers): # -> Generator[str, None, None]:
    """Generate a set of URLs to test given configured URLs plus additional
    driver names.

    Given::

        --dburi postgresql://db1  \
        --dburi postgresql://db2  \
        --dburi postgresql://db2  \
        --dbdriver=psycopg2 --dbdriver=asyncpg?async_fallback=true

    Noting that the default postgresql driver is psycopg2,  the output
    would be::

        postgresql+psycopg2://db1
        postgresql+asyncpg://db1
        postgresql+psycopg2://db2
        postgresql+psycopg2://db3

    That is, for the driver in a --dburi, we want to keep that and use that
    driver for each URL it's part of .   For a driver that is only
    in --dbdrivers, we want to use it just once for one of the URLs.
    for a driver that is both coming from --dburi as well as --dbdrivers,
    we want to keep it in that dburi.

    Driver specific query options can be specified by added them to the
    driver name. For example, to enable the async fallback option for
    asyncpg::

        --dburi postgresql://db1  \
        --dbdriver=asyncpg?async_fallback=true

    """
    ...

@register.init
def generate_driver_url(url, driver, query_str): # -> None:
    ...

@register.init
def drop_all_schema_objects_pre_tables(cfg, eng): # -> None:
    ...

@register.init
def drop_all_schema_objects_post_tables(cfg, eng): # -> None:
    ...

def drop_all_schema_objects(cfg, eng): # -> None:
    ...

@register.init
def create_db(cfg, eng, ident): # -> NoReturn:
    """Dynamically create a database for testing.

    Used when a test run will employ multiple processes, e.g., when run
    via `tox` or `pytest -n4`.
    """
    ...

@register.init
def drop_db(cfg, eng, ident): # -> NoReturn:
    """Drop a database that we dynamically created for testing."""
    ...

@register.init
def update_db_opts(db_url, db_opts): # -> None:
    """Set database options (db_opts) for a test database that we created."""
    ...

@register.init
def post_configure_engine(url, engine, follower_ident): # -> None:
    """Perform extra steps after configuring an engine for testing.

    (For the internal dialects, currently only used by sqlite, oracle)
    """
    ...

@register.init
def follower_url_from_main(url, ident): # -> URL:
    """Create a connection URL for a dynamically-created test database.

    :param url: the connection URL specified when the test run was invoked
    :param ident: the pytest-xdist "worker identifier" to be used as the
                  database name
    """
    ...

@register.init
def configure_follower(cfg, ident): # -> None:
    """Create dialect-specific config settings for a follower database."""
    ...

@register.init
def run_reap_dbs(url, ident): # -> None:
    """Remove databases that were created during the test process, after the
    process has ended.

    This is an optional step that is invoked for certain backends that do not
    reliably release locks on the database as long as a process is still in
    use. For the internal dialects, this is currently only necessary for
    mssql and oracle.
    """
    ...

def reap_dbs(idents_file): # -> None:
    ...

@register.init
def temp_table_keyword_args(cfg, eng): # -> NoReturn:
    """Specify keyword arguments for creating a temporary Table.

    Dialect-specific implementations of this method will return the
    kwargs that are passed to the Table method when creating a temporary
    table for testing, e.g., in the define_temp_tables method of the
    ComponentReflectionTest class in suite/test_reflection.py
    """
    ...

@register.init
def prepare_for_drop_tables(config, connection): # -> None:
    ...

@register.init
def stop_test_class_outside_fixtures(config, db, testcls): # -> None:
    ...

@register.init
def get_temp_table_name(cfg, eng, base_name):
    """Specify table name for creating a temporary Table.

    Dialect-specific implementations of this method will return the
    name to use when creating a temporary table for testing,
    e.g., in the define_temp_tables method of the
    ComponentReflectionTest class in suite/test_reflection.py

    Default to just the base name since that's what most dialects will
    use. The mssql dialect's implementation will need a "#" prepended.
    """
    ...

@register.init
def set_default_schema_on_connection(cfg, dbapi_connection, schema_name): # -> NoReturn:
    ...

