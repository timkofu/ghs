"""
This type stub file was generated by pyright.
"""

from .util import decorator

class ConnectionKiller:
    def __init__(self) -> None:
        ...
    
    def add_pool(self, pool): # -> None:
        ...
    
    def add_engine(self, engine, scope): # -> None:
        ...
    
    def rollback_all(self): # -> None:
        ...
    
    def checkin_all(self): # -> None:
        ...
    
    def close_all(self): # -> None:
        ...
    
    def prepare_for_drop_tables(self, connection): # -> None:
        ...
    
    def after_test(self): # -> None:
        ...
    
    def after_test_outside_fixtures(self, test): # -> None:
        ...
    
    def stop_test_class_inside_fixtures(self): # -> None:
        ...
    
    def stop_test_class_outside_fixtures(self): # -> None:
        ...
    
    def final_cleanup(self): # -> None:
        ...
    
    def assert_all_closed(self): # -> None:
        ...
    


testing_reaper = ...
@decorator
def assert_conns_closed(fn, *args, **kw): # -> None:
    ...

@decorator
def rollback_open_connections(fn, *args, **kw): # -> None:
    """Decorator that rolls back all open connections after fn execution."""
    ...

@decorator
def close_first(fn, *args, **kw): # -> None:
    """Decorator that closes all connections before fn execution."""
    ...

@decorator
def close_open_connections(fn, *args, **kw): # -> None:
    """Decorator that closes all connections after fn execution."""
    ...

def all_dialects(exclude=...): # -> Generator[Any, None, None]:
    ...

class ReconnectFixture:
    def __init__(self, dbapi) -> None:
        ...
    
    def __getattr__(self, key): # -> Any:
        ...
    
    def connect(self, *args, **kwargs):
        ...
    
    def shutdown(self, stop=...): # -> None:
        ...
    
    def restart(self): # -> None:
        ...
    


def reconnecting_engine(url=..., options=...): # -> MockConnection | Engine:
    ...

def testing_engine(url=..., options=..., future=..., asyncio=..., transfer_staticpool=...): # -> MockConnection | Engine:
    """Produce an engine configured by --options with optional overrides."""
    ...

def mock_engine(dialect_name=...):
    """Provides a mocking engine based on the current testing.db.

    This is normally used to test DDL generation flow as emitted
    by an Engine.

    It should not be used in other cases, as assert_compile() and
    assert_sql_execution() are much better choices with fewer
    moving parts.

    """
    ...

class DBAPIProxyCursor:
    """Proxy a DBAPI cursor.

    Tests can provide subclasses of this to intercept
    DBAPI-level cursor operations.

    """
    def __init__(self, engine, conn, *args, **kwargs) -> None:
        ...
    
    def execute(self, stmt, parameters=..., **kw):
        ...
    
    def executemany(self, stmt, params, **kw):
        ...
    
    def __iter__(self): # -> Iterator[Unknown]:
        ...
    
    def __getattr__(self, key): # -> Any:
        ...
    


class DBAPIProxyConnection:
    """Proxy a DBAPI connection.

    Tests can provide subclasses of this to intercept
    DBAPI-level connection operations.

    """
    def __init__(self, engine, cursor_cls) -> None:
        ...
    
    def cursor(self, *args, **kwargs):
        ...
    
    def close(self): # -> None:
        ...
    
    def __getattr__(self, key): # -> Any:
        ...
    


def proxying_engine(conn_cls=..., cursor_cls=...): # -> MockConnection | Engine:
    """Produce an engine that provides proxy hooks for
    common methods.

    """
    ...

