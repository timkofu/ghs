"""
This type stub file was generated by pyright.
"""

import collections
import contextlib

class AssertRule:
    is_consumed = ...
    errormessage = ...
    consume_statement = ...
    def process_statement(self, execute_observed): # -> None:
        ...
    
    def no_more_statements(self): # -> NoReturn:
        ...
    


class SQLMatchRule(AssertRule):
    ...


class CursorSQL(SQLMatchRule):
    def __init__(self, statement, params=..., consume_statement=...) -> None:
        ...
    
    def process_statement(self, execute_observed): # -> None:
        ...
    


class CompiledSQL(SQLMatchRule):
    def __init__(self, statement, params=..., dialect=...) -> None:
        ...
    
    def process_statement(self, execute_observed): # -> None:
        ...
    


class RegexSQL(CompiledSQL):
    def __init__(self, regex, params=..., dialect=...) -> None:
        ...
    


class DialectSQL(CompiledSQL):
    ...


class CountStatements(AssertRule):
    def __init__(self, count) -> None:
        ...
    
    def process_statement(self, execute_observed): # -> None:
        ...
    
    def no_more_statements(self): # -> None:
        ...
    


class AllOf(AssertRule):
    def __init__(self, *rules) -> None:
        ...
    
    def process_statement(self, execute_observed): # -> None:
        ...
    


class EachOf(AssertRule):
    def __init__(self, *rules) -> None:
        ...
    
    def process_statement(self, execute_observed): # -> None:
        ...
    
    def no_more_statements(self): # -> None:
        ...
    


class Conditional(EachOf):
    def __init__(self, condition, rules, else_rules) -> None:
        ...
    


class Or(AllOf):
    def process_statement(self, execute_observed): # -> None:
        ...
    


class SQLExecuteObserved:
    def __init__(self, context, clauseelement, multiparams, params) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class SQLCursorExecuteObserved(collections.namedtuple("SQLCursorExecuteObserved", ["statement", "parameters", "context", "executemany"])):
    ...


class SQLAsserter:
    def __init__(self) -> None:
        ...
    
    def assert_(self, *rules): # -> None:
        ...
    


@contextlib.contextmanager
def assert_engine(engine): # -> Generator[SQLAsserter, None, None]:
    ...

