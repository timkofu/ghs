"""
This type stub file was generated by pyright.
"""

from . import assertions, config

@config.mark_base_test_class()
class TestBase:
    __requires__ = ...
    __unsupported_on__ = ...
    __only_on__ = ...
    __skip_if__ = ...
    __leave_connections_for_teardown__ = ...
    def assert_(self, val, msg=...): # -> None:
        ...
    
    @config.fixture()
    def connection_no_trans(self): # -> Generator[Any | Unknown, None, None]:
        ...
    
    @config.fixture()
    def connection(self): # -> Generator[Any | Unknown, None, None]:
        ...
    
    @config.fixture()
    def registry(self, metadata): # -> Generator[registry, None, None]:
        ...
    
    @config.fixture()
    def future_connection(self, future_engine, connection): # -> Generator[Unknown, None, None]:
        ...
    
    @config.fixture()
    def future_engine(self): # -> Generator[None, None, None]:
        ...
    
    @config.fixture()
    def testing_engine(self): # -> Generator[(url: Unknown = None, options: Unknown = None, future: Unknown = None, asyncio: Unknown = False, transfer_staticpool: Unknown = False) -> (Unknown | MockConnection | Engine), None, None]:
        ...
    
    @config.fixture()
    def async_testing_engine(self, testing_engine): # -> (**kw: Unknown) -> Unknown:
        ...
    
    @config.fixture()
    def metadata(self, request): # -> Generator[MetaData, None, None]:
        """Provide bound MetaData for a single test, dropping afterwards."""
        ...
    
    @config.fixture(params=[(rollback, second_operation, begin_nested) for rollback in (True, False) for second_operation in ("none", "execute", "begin") for begin_nested in (True, False)])
    def trans_ctx_manager_fixture(self, request, metadata): # -> (subject: Unknown, trans_on_subject: Unknown, execute_on_subject: Unknown) -> None:
        ...
    


_connection_fixture_connection = ...
class FutureEngineMixin:
    ...


class TablesTest(TestBase):
    run_setup_bind = ...
    run_define_tables = ...
    run_create_tables = ...
    run_inserts = ...
    run_deletes = ...
    run_dispose_bind = ...
    bind = ...
    _tables_metadata = ...
    tables = ...
    other = ...
    sequences = ...
    @property
    def tables_test_metadata(self): # -> None:
        ...
    
    @classmethod
    def setup_bind(cls):
        ...
    
    @classmethod
    def dispose_bind(cls, bind): # -> None:
        ...
    
    @classmethod
    def define_tables(cls, metadata): # -> None:
        ...
    
    @classmethod
    def fixtures(cls): # -> dict[Unknown, Unknown]:
        ...
    
    @classmethod
    def insert_data(cls, connection): # -> None:
        ...
    
    def sql_count_(self, count, fn): # -> None:
        ...
    
    def sql_eq_(self, callable_, statements): # -> None:
        ...
    


class RemovesEvents:
    def event_listen(self, target, name, fn, **kw): # -> None:
        ...
    


_fixture_sessions = ...
def fixture_session(**kw):
    ...

def stop_test_class_inside_fixtures(cls): # -> None:
    ...

def after_test(): # -> None:
    ...

class ORMTest(TestBase):
    ...


class MappedTest(TablesTest, assertions.AssertsExecutionResults):
    run_setup_classes = ...
    run_setup_mappers = ...
    classes = ...
    @classmethod
    def setup_classes(cls): # -> None:
        ...
    
    @classmethod
    def setup_mappers(cls): # -> None:
        ...
    


class DeclarativeMappedTest(MappedTest):
    run_setup_classes = ...
    run_setup_mappers = ...


class ComputedReflectionFixtureTest(TablesTest):
    run_inserts = ...
    __backend__ = ...
    __requires__ = ...
    regexp = ...
    def normalize(self, text): # -> str:
        ...
    
    @classmethod
    def define_tables(cls, metadata): # -> None:
        ...
    


