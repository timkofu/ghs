"""
This type stub file was generated by pyright.
"""

from .. import util

"""DBAPI proxy utility.

Provides transparent connection pooling on top of a Python DBAPI.

This is legacy SQLAlchemy functionality that is not typically used
today.

"""
proxies = ...
@util.deprecated("1.3", "The :func:`.pool.manage` function is deprecated, and will be " "removed in a future release.")
def manage(module, **params):
    r"""Return a proxy for a DB-API module that automatically
    pools connections.

    Given a DB-API 2.0 module and pool management parameters, returns
    a proxy for the module that will automatically pool connections,
    creating new connection pools for each distinct set of connection
    arguments sent to the decorated module's connect() function.

    :param module: a DB-API 2.0 database module

    :param poolclass: the class used by the pool module to provide
      pooling.  Defaults to :class:`.QueuePool`.

    :param \**params: will be passed through to *poolclass*

    """
    ...

def clear_managers(): # -> None:
    """Remove all current DB-API 2.0 managers.

    All pools and connections are disposed.
    """
    ...

class _DBProxy:
    """Layers connection pooling behavior on top of a standard DB-API module.

    Proxies a DB-API 2.0 connect() call to a connection pool keyed to the
    specific connect parameters. Other functions and attributes are delegated
    to the underlying DB-API module.
    """
    def __init__(self, module, poolclass=..., **kw) -> None:
        """Initializes a new proxy.

        module
          a DB-API 2.0 module

        poolclass
          a Pool class, defaulting to QueuePool

        Other parameters are sent to the Pool object's constructor.

        """
        ...
    
    def close(self): # -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def __getattr__(self, key): # -> Any:
        ...
    
    def get_pool(self, *args, **kw):
        ...
    
    def connect(self, *args, **kw):
        """Activate a connection to the database.

        Connect to the database using this DBProxy's module and the given
        connect arguments.  If the arguments match an existing pool, the
        connection will be returned from the pool's current thread-local
        connection instance, or if there is no thread-local connection
        instance it will be checked out from the set of pooled connections.

        If the pool has no available connections and allows new connections
        to be created, a new database connection will be made.

        """
        ...
    
    def dispose(self, *args, **kw): # -> None:
        """Dispose the pool referenced by the given connect arguments."""
        ...
    


