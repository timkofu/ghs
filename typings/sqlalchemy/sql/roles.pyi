"""
This type stub file was generated by pyright.
"""

class SQLRole:
    """Define a "role" within a SQL statement structure.

    Classes within SQL Core participate within SQLRole hierarchies in order
    to more accurately indicate where they may be used within SQL statements
    of all types.

    .. versionadded:: 1.4

    """
    allows_lambda = ...
    uses_inspection = ...


class UsesInspection:
    _post_inspect = ...
    uses_inspection = ...


class AllowsLambdaRole:
    allows_lambda = ...


class HasCacheKeyRole(SQLRole):
    _role_name = ...


class LiteralValueRole(SQLRole):
    _role_name = ...


class ColumnArgumentRole(SQLRole):
    _role_name = ...


class ColumnArgumentOrKeyRole(ColumnArgumentRole):
    _role_name = ...


class StrAsPlainColumnRole(ColumnArgumentRole):
    _role_name = ...


class ColumnListRole(SQLRole):
    """Elements suitable for forming comma separated lists of expressions."""
    ...


class TruncatedLabelRole(SQLRole):
    _role_name = ...


class ColumnsClauseRole(AllowsLambdaRole, UsesInspection, ColumnListRole):
    _role_name = ...


class LimitOffsetRole(SQLRole):
    _role_name = ...


class ByOfRole(ColumnListRole):
    _role_name = ...


class GroupByRole(AllowsLambdaRole, UsesInspection, ByOfRole):
    _role_name = ...


class OrderByRole(AllowsLambdaRole, ByOfRole):
    _role_name = ...


class StructuralRole(SQLRole):
    ...


class StatementOptionRole(StructuralRole):
    _role_name = ...


class OnClauseRole(AllowsLambdaRole, StructuralRole):
    _role_name = ...


class WhereHavingRole(OnClauseRole):
    _role_name = ...


class ExpressionElementRole(SQLRole):
    _role_name = ...


class ConstExprRole(ExpressionElementRole):
    _role_name = ...


class LabeledColumnExprRole(ExpressionElementRole):
    ...


class BinaryElementRole(ExpressionElementRole):
    _role_name = ...


class InElementRole(SQLRole):
    _role_name = ...


class JoinTargetRole(AllowsLambdaRole, UsesInspection, StructuralRole):
    _role_name = ...


class FromClauseRole(ColumnsClauseRole, JoinTargetRole):
    _role_name = ...
    _is_subquery = ...


class StrictFromClauseRole(FromClauseRole):
    ...


class AnonymizedFromClauseRole(StrictFromClauseRole):
    ...


class ReturnsRowsRole(SQLRole):
    _role_name = ...


class StatementRole(SQLRole):
    _role_name = ...
    _propagate_attrs = ...


class SelectStatementRole(StatementRole, ReturnsRowsRole):
    _role_name = ...
    def subquery(self):
        ...
    


class HasCTERole(ReturnsRowsRole):
    ...


class CompoundElementRole(AllowsLambdaRole, SQLRole):
    """SELECT statements inside a CompoundSelect, e.g. UNION, EXTRACT, etc."""
    _role_name = ...


class DMLRole(StatementRole):
    ...


class DMLTableRole(FromClauseRole):
    _role_name = ...


class DMLColumnRole(SQLRole):
    _role_name = ...


class DMLSelectRole(SQLRole):
    """A SELECT statement embedded in DML, typically INSERT from SELECT"""
    _role_name = ...


class DDLRole(StatementRole):
    ...


class DDLExpressionRole(StructuralRole):
    _role_name = ...


class DDLConstraintColumnRole(SQLRole):
    _role_name = ...


class DDLReferredColumnRole(DDLConstraintColumnRole):
    _role_name = ...


