"""
This type stub file was generated by pyright.
"""

from . import roles

elements = ...
lambdas = ...
schema = ...
selectable = ...
sqltypes = ...
traversals = ...
def expect(role, element, apply_propagate_attrs=..., argname=..., post_inspect=..., **kw):
    ...

def expect_as_key(role, element, **kw):
    ...

def expect_col_expression_collection(role, expressions): # -> Generator[tuple[Unknown, Unknown | None, Unknown | None, Unknown | None], None, None]:
    ...

class RoleImpl:
    __slots__ = ...
    _post_coercion = ...
    _resolve_literal_only = ...
    _skip_clauseelement_for_target_match = ...
    def __init__(self, role_class) -> None:
        ...
    


class _Deannotate:
    __slots__ = ...


class _StringOnly:
    __slots__ = ...
    _resolve_literal_only = ...


class _ReturnsStringKey:
    __slots__ = ...


class _ColumnCoercions:
    __slots__ = ...


class _NoTextCoercion:
    __slots__ = ...


class _CoerceLiterals:
    __slots__ = ...
    _coerce_consts = ...
    _coerce_star = ...
    _coerce_numerics = ...


class LiteralValueImpl(RoleImpl):
    _resolve_literal_only = ...


class _SelectIsNotFrom:
    __slots__ = ...


class HasCacheKeyImpl(RoleImpl):
    __slots__ = ...


class ExpressionElementImpl(_ColumnCoercions, RoleImpl):
    __slots__ = ...


class BinaryElementImpl(ExpressionElementImpl, RoleImpl):
    __slots__ = ...


class InElementImpl(RoleImpl):
    __slots__ = ...


class OnClauseImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl):
    __slots__ = ...
    _coerce_consts = ...


class WhereHavingImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl):
    __slots__ = ...
    _coerce_consts = ...


class StatementOptionImpl(_CoerceLiterals, RoleImpl):
    __slots__ = ...
    _coerce_consts = ...


class ColumnArgumentImpl(_NoTextCoercion, RoleImpl):
    __slots__ = ...


class ColumnArgumentOrKeyImpl(_ReturnsStringKey, RoleImpl):
    __slots__ = ...


class StrAsPlainColumnImpl(_CoerceLiterals, RoleImpl):
    __slots__ = ...


class ByOfImpl(_CoerceLiterals, _ColumnCoercions, RoleImpl, roles.ByOfRole):
    __slots__ = ...
    _coerce_consts = ...


class OrderByImpl(ByOfImpl, RoleImpl):
    __slots__ = ...


class GroupByImpl(ByOfImpl, RoleImpl):
    __slots__ = ...


class DMLColumnImpl(_ReturnsStringKey, RoleImpl):
    __slots__ = ...


class ConstExprImpl(RoleImpl):
    __slots__ = ...


class TruncatedLabelImpl(_StringOnly, RoleImpl):
    __slots__ = ...


class DDLExpressionImpl(_Deannotate, _CoerceLiterals, RoleImpl):
    __slots__ = ...
    _coerce_consts = ...


class DDLConstraintColumnImpl(_Deannotate, _ReturnsStringKey, RoleImpl):
    __slots__ = ...


class DDLReferredColumnImpl(DDLConstraintColumnImpl):
    __slots__ = ...


class LimitOffsetImpl(RoleImpl):
    __slots__ = ...


class LabeledColumnExprImpl(ExpressionElementImpl):
    __slots__ = ...


class ColumnsClauseImpl(_SelectIsNotFrom, _CoerceLiterals, RoleImpl):
    __slots__ = ...
    _coerce_consts = ...
    _coerce_numerics = ...
    _coerce_star = ...
    _guess_straight_column = ...


class ReturnsRowsImpl(RoleImpl):
    __slots__ = ...


class StatementImpl(_CoerceLiterals, RoleImpl):
    __slots__ = ...


class SelectStatementImpl(_NoTextCoercion, RoleImpl):
    __slots__ = ...


class HasCTEImpl(ReturnsRowsImpl):
    __slots__ = ...


class JoinTargetImpl(RoleImpl):
    __slots__ = ...
    _skip_clauseelement_for_target_match = ...


class FromClauseImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl):
    __slots__ = ...


class StrictFromClauseImpl(FromClauseImpl):
    __slots__ = ...


class AnonymizedFromClauseImpl(StrictFromClauseImpl):
    __slots__ = ...


class DMLTableImpl(_SelectIsNotFrom, _NoTextCoercion, RoleImpl):
    __slots__ = ...


class DMLSelectImpl(_NoTextCoercion, RoleImpl):
    __slots__ = ...


class CompoundElementImpl(_NoTextCoercion, RoleImpl):
    __slots__ = ...


_impl_lookup = ...
