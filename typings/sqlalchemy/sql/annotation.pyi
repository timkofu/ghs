"""
This type stub file was generated by pyright.
"""

"""The :class:`.Annotated` class and related routines; creates hash-equivalent
copies of SQL constructs which contain context-specific markers and
associations.

"""
EMPTY_ANNOTATIONS = ...
class SupportsAnnotations:
    _annotations = ...


class SupportsCloneAnnotations(SupportsAnnotations):
    _clone_annotations_traverse_internals = ...


class SupportsWrappingAnnotations(SupportsAnnotations):
    ...


class Annotated:
    """clones a SupportsAnnotated and applies an 'annotations' dictionary.

    Unlike regular clones, this clone also mimics __hash__() and
    __cmp__() of the original element so that it takes its place
    in hashed collections.

    A reference to the original element is maintained, for the important
    reason of keeping its hash value current.  When GC'ed, the
    hash value may be reused, causing conflicts.

    .. note::  The rationale for Annotated producing a brand new class,
       rather than placing the functionality directly within ClauseElement,
       is **performance**.  The __hash__() method is absent on plain
       ClauseElement which leads to significantly reduced function call
       overhead, as the use of sets and dictionaries against ClauseElement
       objects is prevalent, but most are not "annotated".

    """
    _is_column_operators = ...
    def __new__(cls, *args): # -> Any:
        ...
    
    def __init__(self, element, values) -> None:
        ...
    
    def __reduce__(self): # -> tuple[Type[Annotated], tuple[Unknown, immutabledict]]:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @property
    def entity_namespace(self):
        ...
    


annotated_classes = ...
