"""
This type stub file was generated by pyright.
"""

"""Provides managed registration services on behalf of :func:`.listen`
arguments.

By "managed registration", we mean that event listening functions and
other objects can be added to various collections in such a way that their
membership in all those collections can be revoked at once, based on
an equivalent :class:`._EventKey`.

"""
_key_to_collection = ...
_collection_to_key = ...
class _EventKey:
    """Represent :func:`.listen` arguments."""
    __slots__ = ...
    def __init__(self, target, identifier, fn, dispatch_target, _fn_wrap=...) -> None:
        ...
    
    def with_wrapper(self, fn_wrap): # -> _EventKey:
        ...
    
    def with_dispatch_target(self, dispatch_target): # -> _EventKey:
        ...
    
    def listen(self, *args, **kw): # -> None:
        ...
    
    def remove(self): # -> None:
        ...
    
    def contains(self): # -> bool:
        """Return True if this event key is registered to listen."""
        ...
    
    def base_listen(self, propagate=..., insert=..., named=..., retval=..., asyncio=...): # -> None:
        ...
    
    def append_to_list(self, owner, list_): # -> bool:
        ...
    
    def remove_from_list(self, owner, list_): # -> None:
        ...
    
    def prepend_to_list(self, owner, list_): # -> bool:
        ...
    


