"""
This type stub file was generated by pyright.
"""

from .. import util

"""Base implementation classes.

The public-facing ``Events`` serves as the base class for an event interface;
its public attributes represent different kinds of events.   These attributes
are mirrored onto a ``_Dispatch`` class, which serves as a container for
collections of listener functions.   These collections are represented both
at the class level of a particular ``_Dispatch`` class as well as within
instances of ``_Dispatch``.

"""
_registrars = ...
class _UnpickleDispatch:
    """Serializable callable that re-generates an instance of
    :class:`_Dispatch` given a particular :class:`.Events` subclass.

    """
    def __call__(self, _instance_cls):
        ...
    


class _Dispatch:
    """Mirror the event listening definitions of an Events class with
    listener collections.

    Classes which define a "dispatch" member will return a
    non-instantiated :class:`._Dispatch` subclass when the member
    is accessed at the class level.  When the "dispatch" member is
    accessed at the instance level of its owner, an instance
    of the :class:`._Dispatch` class is returned.

    A :class:`._Dispatch` class is generated for each :class:`.Events`
    class defined, by the :func:`._create_dispatcher_class` function.
    The original :class:`.Events` classes remain untouched.
    This decouples the construction of :class:`.Events` subclasses from
    the implementation used by the event internals, and allows
    inspecting tools like Sphinx to work in an unsurprising
    way against the public API.

    """
    __slots__ = ...
    _empty_listener_reg = ...
    def __init__(self, parent, instance_cls=...) -> None:
        ...
    
    def __getattr__(self, name): # -> _EmptyListener:
        ...
    
    def __reduce__(self): # -> tuple[_UnpickleDispatch, tuple[Unknown]]:
        ...
    


class _EventMeta(type):
    """Intercept new Event subclasses and create
    associated _Dispatch classes."""
    def __init__(cls, classname, bases, dict_) -> None:
        ...
    


class Events(util.with_metaclass(_EventMeta, object)):
    """Define event listening functions for a particular target type."""
    ...


class _JoinedDispatcher:
    """Represent a connection between two _Dispatch objects."""
    __slots__ = ...
    def __init__(self, local, parent) -> None:
        ...
    
    def __getattr__(self, name): # -> _JoinedListener:
        ...
    


class dispatcher:
    """Descriptor used by target classes to
    deliver the _Dispatch class at the class level
    and produce new _Dispatch instances for target
    instances.

    """
    def __init__(self, events) -> None:
        ...
    
    def __get__(self, obj, cls):
        ...
    


class slots_dispatcher(dispatcher):
    def __get__(self, obj, cls):
        ...
    


