"""
This type stub file was generated by pyright.
"""

from . import connection

logger = ...
class PoolConnectionProxyMeta(type):
    def __new__(mcls, name, bases, dct, *, wrap=...): # -> PoolConnectionProxyMeta:
        ...
    
    def __init__(cls, name, bases, dct, *, wrap=...) -> None:
        ...
    


class PoolConnectionProxy(connection._ConnectionProxy, metaclass=PoolConnectionProxyMeta, wrap=True):
    __slots__ = ...
    def __init__(self, holder: PoolConnectionHolder, con: connection.Connection) -> None:
        ...
    
    def __getattr__(self, attr): # -> Any:
        ...
    
    def __repr__(self): # -> str:
        ...
    


class PoolConnectionHolder:
    __slots__ = ...
    def __init__(self, pool, *, max_queries, setup, max_inactive_time) -> None:
        ...
    
    async def connect(self): # -> None:
        ...
    
    async def acquire(self) -> PoolConnectionProxy:
        ...
    
    async def release(self, timeout): # -> None:
        ...
    
    async def wait_until_released(self): # -> None:
        ...
    
    async def close(self): # -> None:
        ...
    
    def terminate(self): # -> None:
        ...
    


class Pool:
    """A connection pool.

    Connection pool can be used to manage a set of connections to the database.
    Connections are first acquired from the pool, then used, and then released
    back to the pool.  Once a connection is released, it's reset to close all
    open cursors and other resources *except* prepared statements.

    Pools are created by calling :func:`~asyncpg.pool.create_pool`.
    """
    __slots__ = ...
    def __init__(self, *connect_args, min_size, max_size, max_queries, max_inactive_connection_lifetime, setup, init, loop, connection_class, record_class, **connect_kwargs) -> None:
        ...
    
    def set_connect_args(self, dsn=..., **connect_kwargs): # -> None:
        r"""Set the new connection arguments for this pool.

        The new connection arguments will be used for all subsequent
        new connection attempts.  Existing connections will remain until
        they expire. Use :meth:`Pool.expire_connections()
        <asyncpg.pool.Pool.expire_connections>` to expedite the connection
        expiry.

        :param str dsn:
            Connection arguments specified using as a single string in
            the following format:
            ``postgres://user:pass@host:port/database?option=value``.

        :param \*\*connect_kwargs:
            Keyword arguments for the :func:`~asyncpg.connection.connect`
            function.

        .. versionadded:: 0.16.0
        """
        ...
    
    async def execute(self, query: str, *args, timeout: float = ...) -> str:
        """Execute an SQL command (or commands).

        Pool performs this operation using one of its connections.  Other than
        that, it behaves identically to
        :meth:`Connection.execute() <connection.Connection.execute>`.

        .. versionadded:: 0.10.0
        """
        ...
    
    async def executemany(self, command: str, args, *, timeout: float = ...):
        """Execute an SQL *command* for each sequence of arguments in *args*.

        Pool performs this operation using one of its connections.  Other than
        that, it behaves identically to
        :meth:`Connection.executemany() <connection.Connection.executemany>`.

        .. versionadded:: 0.10.0
        """
        ...
    
    async def fetch(self, query, *args, timeout=...) -> list:
        """Run a query and return the results as a list of :class:`Record`.

        Pool performs this operation using one of its connections.  Other than
        that, it behaves identically to
        :meth:`Connection.fetch() <connection.Connection.fetch>`.

        .. versionadded:: 0.10.0
        """
        ...
    
    async def fetchval(self, query, *args, column=..., timeout=...):
        """Run a query and return a value in the first row.

        Pool performs this operation using one of its connections.  Other than
        that, it behaves identically to
        :meth:`Connection.fetchval() <connection.Connection.fetchval>`.

        .. versionadded:: 0.10.0
        """
        ...
    
    async def fetchrow(self, query, *args, timeout=...):
        """Run a query and return the first row.

        Pool performs this operation using one of its connections.  Other than
        that, it behaves identically to
        :meth:`Connection.fetchrow() <connection.Connection.fetchrow>`.

        .. versionadded:: 0.10.0
        """
        ...
    
    def acquire(self, *, timeout=...): # -> PoolAcquireContext:
        """Acquire a database connection from the pool.

        :param float timeout: A timeout for acquiring a Connection.
        :return: An instance of :class:`~asyncpg.connection.Connection`.

        Can be used in an ``await`` expression or with an ``async with`` block.

        .. code-block:: python

            async with pool.acquire() as con:
                await con.execute(...)

        Or:

        .. code-block:: python

            con = await pool.acquire()
            try:
                await con.execute(...)
            finally:
                await pool.release(con)
        """
        ...
    
    async def release(self, connection, *, timeout=...): # -> None:
        """Release a database connection back to the pool.

        :param Connection connection:
            A :class:`~asyncpg.connection.Connection` object to release.
        :param float timeout:
            A timeout for releasing the connection.  If not specified, defaults
            to the timeout provided in the corresponding call to the
            :meth:`Pool.acquire() <asyncpg.pool.Pool.acquire>` method.

        .. versionchanged:: 0.14.0
            Added the *timeout* parameter.
        """
        ...
    
    async def close(self): # -> None:
        """Attempt to gracefully close all connections in the pool.

        Wait until all pool connections are released, close them and
        shut down the pool.  If any error (including cancellation) occurs
        in ``close()`` the pool will terminate by calling
        :meth:`Pool.terminate() <pool.Pool.terminate>`.

        It is advisable to use :func:`python:asyncio.wait_for` to set
        a timeout.

        .. versionchanged:: 0.16.0
            ``close()`` now waits until all pool connections are released
            before closing them and the pool.  Errors raised in ``close()``
            will cause immediate pool termination.
        """
        ...
    
    def terminate(self): # -> None:
        """Terminate all connections in the pool."""
        ...
    
    async def expire_connections(self): # -> None:
        """Expire all currently open connections.

        Cause all currently open connections to get replaced on the
        next :meth:`~asyncpg.pool.Pool.acquire()` call.

        .. versionadded:: 0.16.0
        """
        ...
    
    def __await__(self): # -> Generator[Any, None, Pool | None]:
        ...
    
    async def __aenter__(self): # -> Pool:
        ...
    
    async def __aexit__(self, *exc): # -> None:
        ...
    


class PoolAcquireContext:
    __slots__ = ...
    def __init__(self, pool, timeout) -> None:
        ...
    
    async def __aenter__(self):
        ...
    
    async def __aexit__(self, *exc): # -> None:
        ...
    
    def __await__(self):
        ...
    


def create_pool(dsn=..., *, min_size=..., max_size=..., max_queries=..., max_inactive_connection_lifetime=..., setup=..., init=..., loop=..., connection_class=..., record_class=..., **connect_kwargs): # -> Pool:
    r"""Create a connection pool.

    Can be used either with an ``async with`` block:

    .. code-block:: python

        async with asyncpg.create_pool(user='postgres',
                                       command_timeout=60) as pool:
            await pool.fetch('SELECT 1')

    Or to perform multiple operations on a single connection:

    .. code-block:: python

        async with asyncpg.create_pool(user='postgres',
                                       command_timeout=60) as pool:
            async with pool.acquire() as con:
                await con.execute('''
                   CREATE TABLE names (
                      id serial PRIMARY KEY,
                      name VARCHAR (255) NOT NULL)
                ''')
                await con.fetch('SELECT 1')

    Or directly with ``await`` (not recommended):

    .. code-block:: python

        pool = await asyncpg.create_pool(user='postgres', command_timeout=60)
        con = await pool.acquire()
        try:
            await con.fetch('SELECT 1')
        finally:
            await pool.release(con)

    .. warning::
        Prepared statements and cursors returned by
        :meth:`Connection.prepare() <connection.Connection.prepare>` and
        :meth:`Connection.cursor() <connection.Connection.cursor>` become
        invalid once the connection is released.  Likewise, all notification
        and log listeners are removed, and ``asyncpg`` will issue a warning
        if there are any listener callbacks registered on a connection that
        is being released to the pool.

    :param str dsn:
        Connection arguments specified using as a single string in
        the following format:
        ``postgres://user:pass@host:port/database?option=value``.

    :param \*\*connect_kwargs:
        Keyword arguments for the :func:`~asyncpg.connection.connect`
        function.

    :param Connection connection_class:
        The class to use for connections.  Must be a subclass of
        :class:`~asyncpg.connection.Connection`.

    :param type record_class:
        If specified, the class to use for records returned by queries on
        the connections in this pool.  Must be a subclass of
        :class:`~asyncpg.Record`.

    :param int min_size:
        Number of connection the pool will be initialized with.

    :param int max_size:
        Max number of connections in the pool.

    :param int max_queries:
        Number of queries after a connection is closed and replaced
        with a new connection.

    :param float max_inactive_connection_lifetime:
        Number of seconds after which inactive connections in the
        pool will be closed.  Pass ``0`` to disable this mechanism.

    :param coroutine setup:
        A coroutine to prepare a connection right before it is returned
        from :meth:`Pool.acquire() <pool.Pool.acquire>`.  An example use
        case would be to automatically set up notifications listeners for
        all connections of a pool.

    :param coroutine init:
        A coroutine to initialize a connection when it is created.
        An example use case would be to setup type codecs with
        :meth:`Connection.set_builtin_type_codec() <\
        asyncpg.connection.Connection.set_builtin_type_codec>`
        or :meth:`Connection.set_type_codec() <\
        asyncpg.connection.Connection.set_type_codec>`.

    :param loop:
        An asyncio event loop instance.  If ``None``, the default
        event loop will be used.

    :return: An instance of :class:`~asyncpg.pool.Pool`.

    .. versionchanged:: 0.10.0
       An :exc:`~asyncpg.exceptions.InterfaceError` will be raised on any
       attempted operation on a released connection.

    .. versionchanged:: 0.13.0
       An :exc:`~asyncpg.exceptions.InterfaceError` will be raised on any
       attempted operation on a prepared statement or a cursor created
       on a connection that has been released to the pool.

    .. versionchanged:: 0.13.0
       An :exc:`~asyncpg.exceptions.InterfaceWarning` will be produced
       if there are any active listeners (added via
       :meth:`Connection.add_listener() <connection.Connection.add_listener>`
       or :meth:`Connection.add_log_listener()
       <connection.Connection.add_log_listener>`) present on the connection
       at the moment of its release to the pool.

    .. versionchanged:: 0.22.0
       Added the *record_class* parameter.
    """
    ...

